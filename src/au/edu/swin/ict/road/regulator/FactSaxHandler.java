/**
 * 
 */
package au.edu.swin.ict.road.regulator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

//import au.edu.swin.ict.road.composite.exceptions.FactSynchronizationException;

/**
 * This class represents the data handler for the SAX parser. It generates
 * FactObject objects based on the events generated by the SAX parser. The
 * sample XML string which is passed is given below.
 * 
 * <code> 
 * 	<Facts> 
 * 		<Fact name="Customer" source="external">
 * 			<Identifier key="custid">C123</Identifier>
 * 			<Attributes>
 * 				<Attribute key="name">Fred</Attribute>
 * 				<Attribute key="balance">1000</Attribute>
 * 				<Attribute key="debit">200</Attribute>
 * 			</Attribute>
 * 		</Fact>
 * 	</Facts>
 * 	</code>
 * 
 * 
 * @author Aditya Chitre (chitreaditya@gmail.com)
 * 
 */
public class FactSaxHandler extends DefaultHandler {

    private List<FactObject> factObjectList = new ArrayList<FactObject>();
    private FactObject factObject = null;
    private String factType = null;
    private int factSource;
    private String identifier = null;
    private String identifierValue = null;
    private String attributeKey = null;
    private String attributeValue = null;
    private Map<String, Object> properties = new HashMap<String, Object>();
    private String currentElement = null;

    public void startElement(String uri, String localName, String qName,
	    Attributes attributes) throws SAXException {

	if (localName.equalsIgnoreCase("Fact")) {
	    factType = attributes.getValue(0);
	    factSource = FactObject.INTERNAL_SOURCE;
	    if (attributes.getValue(1) != null) {
		if (attributes.getValue(1).equalsIgnoreCase("external")) {
		    factSource = FactObject.EXTERNAL_SOURCE;
		} else if (attributes.getValue(1).equalsIgnoreCase("internal")) {
		    factSource = FactObject.INTERNAL_SOURCE;
		} else if (!attributes.getValue(1).equalsIgnoreCase("external")
			&& !attributes.getValue(1).equalsIgnoreCase("internal")
			&& attributes.getValue(1) != "") {
		    throw new SAXException(
			    "The source must be either internal or external");
		}
	    }

	}

	if (localName.equalsIgnoreCase("Identifier")) {
	    identifier = attributes.getValue(0);
	    currentElement = "Identifier";
	}

	if (localName.equalsIgnoreCase("Attribute")) {
	    attributeKey = attributes.getValue(0);
	    attributeValue = null;
	    currentElement = "Attribute";
	    properties.put(attributeKey, attributeValue);
	}
    }

    public void characters(char ch[], int start, int length)
	    throws SAXException {
	String value = new String(ch, start, length);

	if (!value.trim().equals("")) {
	    if (currentElement.equalsIgnoreCase("Identifier")) {
		identifierValue = value;
	    }

	    else if (currentElement.equalsIgnoreCase("Attribute")) {
		attributeValue = value;
		properties.put(attributeKey, attributeValue);
	    }
	}

    }

    public void endElement(String uri, String localName, String qName)
	    throws SAXException {

	if (localName.equalsIgnoreCase("Fact")) {

	    if (factType.length() == 0 || identifier.length() == 0
		    || identifierValue.length() == 0) {
		throw new SAXException(
			"The Fact Type, Identifier or Identifier Value cannot be null");
	    } else {
		factObject = new FactObject(factType, identifier,
			identifierValue);
		factObject.setAttributes(properties);
		factObject.setFactSource(factSource);
		factObjectList.add(factObject);
		factType = null;
		identifier = null;
		identifierValue = null;
		properties = new HashMap<String, Object>();
	    }
	}
    }

    public List<FactObject> getFactObjectList() {
	return factObjectList;
    }

}
